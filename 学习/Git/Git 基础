#环境配置

git config --global user.name your_name : 设置你的用户名，提交会显示
git config --global user.email your_email : 设置你的邮箱
git config core.quotepath false : 解决中文文件名显示为数字问题
#基本操作

git init : 初始化一个 git 仓库
git add <filename> : 添加一个文件到 git 仓库中
git commit -m "commit message": 提交到本地
git push [remote-name] [branch-name] : 把本地的提交记录推送到远端分支
git pull: 更新仓库 git pull = git fetch + git merge
git checkout -- <file> : 还原未暂存 (staged) 的文件
git reset HEAD <file>... : 取消暂存，那么还原一个暂存文件，应该是先 reset 后 checkout
git stash : 隐藏本地提交记录，恢复的时候 git stash pop。这样可以在本地和远程有冲突的情况下，更新其他文件3分支

git branch <branch-name> : 基于当前 commit 新建一个分支，但是不切换到新分支
git branch -r : 查看远程的所有分支（常用）
git checkout -b <branch-name> : 新建并切换分支
git checkout <branch-name> : 切换分支(常用)
git branch -d <branch-name> : 删除分支
git push origin <branch-name> : 推送本地分支
git checkout -b <local-branch-name> origin/<origin-branch-name> : 基于某个远程分支新建一个分支开发
git checkout --track origin/<origin-branch-name> : 跟踪远程分支（创建跟踪远程分支，Git 在 git push 的时候不需要指定 origin 和 branch-name ，其实当我们 clone 一个 repo 到本地的时候，master 分支就是 origin/master 的跟踪分支，所以提交的时候直接 git push)。
git push origin :<origin-branch-name> : 删除远程分支
实践 --- 主分支 Master/ 开发分支 Develop

主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 Develop。

# Git 创建 Develop 分支
git checkout -b develop master

# 将 Develop 分支发布到 Master 分支
523523456
# 切换到 Master 分支
git checkout master

# 对 Develop 分支进行合并
git merge --no-ff develop
上一条命令的 --no-ff 参数是什么意思。默认情况下，Git 执行"快进式合并"（fast-farward merge），会直接将 Master 分支指向 Develop 分支。

# 删除本地分支
git branch -d develop

#标签

git tag -a <tagname> -m <message> : 创建一个标签（用 -a 指定标签名，-m 指定说明文字） 如 git tag -a v1.0 -m "version 1.0 released mitaka"
git tag : 显示已有的标签
git show tagname: 显示某个标签的详细信息
git push origin v1.0 push 到远端仓库 如git push -u ${PWD##*/} master v1.0
git checkout -b <tag-name> : 基于某个 tag 创建一个新的分支

#Git shortcuts/aliases

git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
